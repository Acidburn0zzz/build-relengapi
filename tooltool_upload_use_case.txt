# Tooltool upload: a use case

## Part I: The upload to a tooltool upload server


Let's say I am an authorized tooltool uploader.
This means that:

- I have a unix account on the tooltool upload server, let's say sbruno
- I have ssh access to the tooltool upload server, and my public ssh key has been properly added to the server so that I have write access to folder /home/sbruno


Now, I have some files which need to be available to tooltool users (file1.pdf, file2.pdf, file3.pdf) so I need to perform the following steps:

1. I create a folder containing the files I want to make available to tooltool users
2. I create a tooltool package using the brand new tooltool "package" command 
3. I upload the newly created tooltool package using the brand new tooltool "upload" command

Let's do it!

### Step 1: put the relevant files in a single folder
I put the mentioned files in a folder named my-tooltool-files (the name can be arbitrary), as follows:

	Simones-MacBook-Pro:~ sbruno$ ls my-tooltool-files/
	my-tooltool-files/
    file1.pdf
    file2.pdf
    file3.pdf
	
###  Step 2: create a tooltool package

A "Tooltool Package" is a folder containing the files, renamed to their own digests, and a tooltool manifest.

I can create a tooltool package from my original folder (prepared in step 1) using the tooltool package command as follows:

    python tooltool.py package --folder <folderpath> --message "something I want to say about this package"

Let's see an example:

	Simones-MacBook-Pro:build-tooltool sbruno$ python tooltool.py package --folder ~/my-tooltool-files --message "My three favourite books in pdf format"
	INFO - Creating package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE from folder /Users/sbruno/my-tooltool-files...
	INFO - Package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE has been created from folder /Users/sbruno/my-tooltool-files
	Simones-MacBook-Pro:build-tooltool sbruno$
	
Done!

As a result, a new folder has been created, named my-tooltool-files.TOOLTOOL-PACKAGE (the .TOOLTOOL-PACKAGE suffix has been added to the original folder name).
Let's see what it contains:

	$ ls my-tooltool-files.TOOLTOOL-PACKAGE/
    58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	my-tooltool-files.tt
	my-tooltool-files.txt
	
It contains three types of files:
- the original files have been renamed according to the usual tooltool hashing mechanism
- a tooltool manifest has been added, my-tooltool-files.tt
- a text file, containing the message I added while creating the package, which has the same name as the manifest (but extension txt, instead of tt)

###  Step 3: upload to the tooltool upload server

Tooltool uses rsync over ssh authentication to transfer files to the upload server.
In order to use tooltool to run uploads the following preconditions need to be met:

1. rsync needs to be installed on my machine
2. my .ssh/config file needs to be properly configured to access the upload server.

In my case, the .ssh/config file contains the following section:

	Host 78.47.146.153
	  IdentityFile ~/.ssh/id_rsa
	  User sbruno

If these preconditions are met, I just need to use the upload command:

    ./tooltool.py upload -v --package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE --user "sbruno" --host "78.47.146.153" --path "/home/sbruno/pvt"

In this case I am uploading to folder "/home/sbruno/pvt", since I want my files to be distributed only to internal moco developers.

Let's see what the result is:

	Simones-MacBook-Pro:build-tooltool sbruno$ ./tooltool.py upload -v --package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE --user "sbruno" --host "78.47.146.153" --path "/home/sbruno/pvt"
	INFO - The following two rsync commands will be executed to transfer the tooltool package:
	INFO - 1) rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '- *.tt' -f '- *.txt'
	INFO - 2) rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '+ *.tt' -f '+ *.txt'
	INFO - Please note that the order of execution IS relevant!
	INFO - Uploading hashed files with command: rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '- *.tt' -f '- *.txt'
	INFO - created directory /home/sbruno/pvt
	INFO - 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	        6148 100%    0.00kB/s    0:00:00 (xfer#1, to-check=3/4)
	INFO - 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	     3017536 100%  403.34kB/s    0:00:07 (xfer#2, to-check=2/4)
	INFO - 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	     3420686 100%  126.43kB/s    0:00:26 (xfer#3, to-check=1/4)
	INFO - b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	      139308 100%  137.97kB/s    0:00:00 (xfer#4, to-check=0/4)
	INFO -
	INFO - sent 6585227 bytes  received 108 bytes  123090.37 bytes/sec
	INFO - total size is 6583678  speedup is 1.00
	INFO - Uploading metadata files (manifest and notes) with command: rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '+ *.tt' -f '+ *.txt'
	INFO - 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	        6148 100%    5.20MB/s    0:00:00 (xfer#1, to-check=5/6)
	INFO - 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	     3017536 100%   42.32MB/s    0:00:00 (xfer#2, to-check=4/6)
	INFO - 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	     3420686 100%   35.46MB/s    0:00:00 (xfer#3, to-check=3/6)
	INFO - b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	      139308 100%    1.41MB/s    0:00:00 (xfer#4, to-check=2/6)
	INFO - my-tooltool-files.tt
	         858 100%    8.91kB/s    0:00:00 (xfer#5, to-check=1/6)
	INFO - my-tooltool-files.txt
	          38 100%    0.39kB/s    0:00:00 (xfer#6, to-check=0/6)
	INFO -
	INFO - sent 16956 bytes  received 22952 bytes  15963.20 bytes/sec
	INFO - total size is 6584574  speedup is 164.99
	INFO - Package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE has been correctly uploaded to 78.47.146.153:/home/sbruno/pvt


###  The distribute command to run  Step 2 + Step 3 in one go

In git, the "git pull" command is actually a shortcut to run "git fetch" and "git merge" in sequence

Similarly, the "tooltool distribute" command is a shortcut to run in a single shot "tooltool package" and "tooltool upload":

    ./tooltool.py distribute -v --folder /Users/sbruno/my-tooltool-files --message "blabla" --user "sbruno" --host "78.47.146.153" --path "/home/sbruno/pvt"

Not surprisingly, all the parameters it receves have already been used in the previous examples:
 
- --folder, --message (as in the package command)
- --user --host --path (as in the upload command)

Let's see how it works:

	Simones-MacBook-Pro:build-tooltool sbruno$ ./tooltool.py distribute -v --folder /Users/sbruno/my-tooltool-files --message "blabla" --user "sbruno" --host "78.47.146.153" --path "/home/sbruno/pvt"
	DEBUG - processing 'distribute' command with args ''
	DEBUG - using options: {'verbose': True, 'algorithm': 'sha512', 'package': None, 'base_url': None, 'manifest': 'manifest.tt', 'host': '78.47.146.153', 'quiet': False, 'user': 'sbruno', 'path': '/home/sbruno/pvt', 'folder': '/Users/sbruno/my-tooltool-files', 'size': 0.0, 'message': 'blabla', 'overwrite': False, 'cache_folder': None}
	INFO - Creating package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 from folder /Users/sbruno/my-tooltool-files...
	DEBUG - creating a new manifest file
	DEBUG - adding /Users/sbruno/my-tooltool-files/.DS_Store
	DEBUG - hashed /Users/sbruno/my-tooltool-files/.DS_Store with sha512 to be 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	DEBUG - creating FileRecord 0x1010e1a90
	DEBUG - Added file /Users/sbruno/my-tooltool-files/.DS_Store to tooltool package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 with hash 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	DEBUG - appending a new file record to manifest file
	DEBUG - added '/Users/sbruno/my-tooltool-files/.DS_Store' to manifest
	DEBUG - adding /Users/sbruno/my-tooltool-files/file1.pdf
	DEBUG - hashed /Users/sbruno/my-tooltool-files/file1.pdf with sha512 to be 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	DEBUG - creating FileRecord 0x1010e1b10
	DEBUG - Added file /Users/sbruno/my-tooltool-files/file1.pdf to tooltool package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 with hash 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	DEBUG - appending a new file record to manifest file
	DEBUG - added '/Users/sbruno/my-tooltool-files/file1.pdf' to manifest
	DEBUG - adding /Users/sbruno/my-tooltool-files/file2.pdf
	DEBUG - hashed /Users/sbruno/my-tooltool-files/file2.pdf with sha512 to be b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	DEBUG - creating FileRecord 0x1010e1b50
	DEBUG - Added file /Users/sbruno/my-tooltool-files/file2.pdf to tooltool package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 with hash b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	DEBUG - appending a new file record to manifest file
	DEBUG - added '/Users/sbruno/my-tooltool-files/file2.pdf' to manifest
	DEBUG - adding /Users/sbruno/my-tooltool-files/file3.pdf
	DEBUG - hashed /Users/sbruno/my-tooltool-files/file3.pdf with sha512 to be 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	DEBUG - creating FileRecord 0x1010e1b90
	DEBUG - Added file /Users/sbruno/my-tooltool-files/file3.pdf to tooltool package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 with hash 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	DEBUG - appending a new file record to manifest file
	DEBUG - added '/Users/sbruno/my-tooltool-files/file3.pdf' to manifest
	INFO - Package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 has been created from folder /Users/sbruno/my-tooltool-files
	INFO - The following two rsync commands will be executed to transfer the tooltool package:
	INFO - 1) rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '- *.tt' -f '- *.txt'
	INFO - 2) rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '+ *.tt' -f '+ *.txt'
	INFO - Please note that the order of execution IS relevant!
	INFO - Uploading hashed files with command: rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '- *.tt' -f '- *.txt'
	INFO - 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	        6148 100%    5.20MB/s    0:00:00 (xfer#1, to-check=3/4)
	INFO - 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	     3017536 100%   73.79MB/s    0:00:00 (xfer#2, to-check=2/4)
	INFO - 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	     3420686 100%   50.97MB/s    0:00:00 (xfer#3, to-check=1/4)
	INFO - b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	      139308 100%    2.01MB/s    0:00:00 (xfer#4, to-check=0/4)
	INFO -
	INFO - sent 15933 bytes  received 22908 bytes  15536.40 bytes/sec
	INFO - total size is 6583678  speedup is 169.50
	INFO - Uploading metadata files (manifest and notes) with command: rsync  /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1/* sbruno@78.47.146.153:/home/sbruno/pvt --progress -f '+ *.tt' -f '+ *.txt'
	INFO - 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	        6148 100%    5.20MB/s    0:00:00 (xfer#1, to-check=5/6)
	INFO - 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	     3017536 100%   65.40MB/s    0:00:00 (xfer#2, to-check=4/6)
	INFO - 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	     3420686 100%   47.28MB/s    0:00:00 (xfer#3, to-check=3/6)
	INFO - b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	      139308 100%    1.90MB/s    0:00:00 (xfer#4, to-check=2/6)
	INFO - my-tooltool-files1.tt
	         858 100%   11.80kB/s    0:00:00 (xfer#5, to-check=1/6)
	INFO - my-tooltool-files1.txt
	           6 100%    0.08kB/s    0:00:00 (xfer#6, to-check=0/6)
	INFO -
	INFO - sent 16925 bytes  received 22952 bytes  15950.80 bytes/sec
	INFO - total size is 6584542  speedup is 165.12
	INFO - Package /Users/sbruno/my-tooltool-files.TOOLTOOL-PACKAGE1 has been correctly uploaded to 78.47.146.153:/home/sbruno/pvt
	
## Part II: The tooltool sync script

Tooltool uploaders copy hashed files and manifests to their own upload folders - they have one for each "distribution type", typically a pub one (to distribute files publicly)
 and a pvt one (for files to be available to mozilla employees only).

The tooltool sync script serves the purpose of collecting all uploads from individual uploaders and aggregating them per distribution type (public, private), storing some metadata about the uploads themselves. It is supposed to run periodically via crontab scheduling to pick new uploads and distribute their content.

### The sync script configuration

The sync script needs a configuration file in json format named config.json, let's see an example here:

	{
	  "root":"/Users/sbruno/root",
	  "matching":{"pvt": "/Users/sbruno/pvt",
	            "pub": "/Users/sbruno/pub"}

	}

Two informations provided are just two:

-  a root folder, which is the base direcroty in which all personal uploaders directories are located
-  a "matching" pattern specifying for each supported "distribution type" (in this case "pvt" and "pub") the corresponding local destination folder where all the files will from different uploaders will be collected

Let's say I have two uploaders, Alice and Bob; this is how the root folder will look like:

	root
	├── alice
	│   ├── pub
	│   └── pvt
	└── bob
	    ├── pub
	    │   ├── 58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	    │   ├── 630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	    │   ├── 931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	    │   ├── b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	    │   ├── package_test1.tt
	    │   └── package_test1.txt
	    └── pvt
	
A few points here:

- each user has two upload folders, one for each supported distribution type. The sync script supports an arbitrary number of distribution types, as far as they are defined in the configuration file in the matching section
- In this case, Bob has uploaded a manifest in the upload folder, and a bunch of hashed files

In its next execution, the sync script will detect the manifest, check that all referenced hash files are present, check that none of them has been uploaded before and, if this is is the case, it will proceed copying the hashed files to the destination provided in the config file while storing some information about this upload.

### The sync script in action

The sync script will perform the following actions:

#### Step 1: Copy of hash files to the appropriate destination

All files mentioned in package_test1.tt manifest, in Bob's pub folder, will be hash checked and copied to the destination specified in the conf file (in this case, "/Users/sbruno/pub"):

	Simones-MacBook-Pro:pub sbruno$ ls
	58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4

Please note that in the following circumstances the copy will not occur:

- if at least one of the files mentioned in the manifest are missing (for example in case of a partial upload)
- if at least one of the hashed files' hashes are different from their filename (hash check failure)
- if at least one of the hashed files has already been processed by the sync script, which could mean a collision (this is possible because the sync scripts keeps historical data about executed transfers)

If one of these circumstances occur, the sync script will just log that it is impossible to process the given manifest.

#### Step 2: Store locally a copy of the processed manifest

After processing a manifest, the sync script with store locally a copy of the processed manifest, prepending the processing timestamp to its name.
In this example we will have a manifest stored locally as
    
    2013_07_24-10.45.37.package_test1.tt

#### Step 3: Store locally further information about the upload

Whenever the sync script proceeds with a file transfer, all relevant information about the upload is stored locally in two json files: 

    processed_digests.json
    processed_manifests.json

Let's see their content:

	Simones-MacBook-Pro:build-tooltool sbruno$ cat processed_digests.json
	{
	  "b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4": "2013_07_24-10.45.37.package_test1.tt",
	  "58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837": "2013_07_24-10.45.37.package_test1.tt",
	  "931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4": "2013_07_24-10.45.37.package_test1.tt",
	  "630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d": "2013_07_24-10.45.37.package_test1.tt"
	}
	
	Simones-MacBook-Pro:build-tooltool sbruno$ cat processed_manifests.json
	{
	  "2013_07_24-10.45.37.package_test1.tt": [
	    "bob",
	    "blablablablablabla",
	    "pub"
	  ]
	}
	
processed_digests.json relates each transferred file to the manifest it belongs to

Processed_manifests.json contains information about the manifests: the user who uploaded, the intended distribution type (in this case pub), and the user comments

#### Step 4: Rename the processed manifests in the uploader folder as well

The content of Bob's public folder after sync script processed its manifest will be the following:

	Simones-MacBook-Pro:pub sbruno$ ls
	2013_07_24-10.45.37.package_test1.tt
	2013_07_24-10.45.37.package_test1.txt
	58941214a8334331e52114aab851fc3d8d5da5dd14983f933da8735c24b0ddcac134e8f13692553199c4d9a14a4b3188b62878a30b9d696edda1204666b60837
	630d01a329c70aedb66ae7118d12ff7dc6fe06223d1c27b793e1bacc0ca84dd469ec1a6050184f8d9c35a0636546b0e2e5be08d9b51285e53eb1c9f959fef59d
	931eb84f798dc9add1a10c7bbd4cc85fe08efda26cac473411638d1f856865524a517209d4c7184d838ee542c8ebc9909dc64ef60f8653a681270ce23524e8e4
	b2a463249bb3a9e7f2a3604697b000d2393db4f37b623fc099beb8456fbfdb332567013a3131ad138d8633cb19c50a8b77df3990d67500af896cada8b6f698b4
	












